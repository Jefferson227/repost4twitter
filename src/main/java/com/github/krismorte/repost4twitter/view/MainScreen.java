/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.krismorte.repost4twitter.view;

import com.github.krismorte.repost4twitter.dao.AccountTargetDao;
import com.github.krismorte.repost4twitter.dao.StatusRepostedDao;
import com.github.krismorte.repost4twitter.dao.TwitterAccountDao;
import com.github.krismorte.repost4twitter.model.AccountTarget;
import com.github.krismorte.repost4twitter.model.Post;
import com.github.krismorte.repost4twitter.model.ScreenAccount;
import com.github.krismorte.repost4twitter.model.StatusReposted;
import com.github.krismorte.repost4twitter.model.TimeLine;
import com.github.krismorte.repost4twitter.model.TwitterAccount;
import com.github.krismorte.repost4twitter.view.tables.ScreenAccountTables;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import twitter4j.Status;

/**
 *
 * @author krisnamourtscf
 */
public class MainScreen extends javax.swing.JFrame {

    private ScreenAccountTables helpTable = new ScreenAccountTables();
    private JTable table;
    private TwitterAccountDao twitterAccountDao = new TwitterAccountDao();
    private AccountTargetDao accountTargetDao = new AccountTargetDao();
    private StatusRepostedDao statusRepostedDao = new StatusRepostedDao();
    private List<TwitterAccount> twitterAccounts;
    private LocalDateTime lastTime;
    private Bot bot;

    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/images/share.png")).getImage());
        btnTwitter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/twitter.png")));
        btnStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/start.png")));
        btnStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stop.png")));
        loadTable();
    }

    private void loadTable() {
        List<ScreenAccount> accounts = new ArrayList<>();
        for (TwitterAccount t : twitterAccountDao.list()) {
            ScreenAccount s = new ScreenAccount();
            s.chooseTwitter();
            s.setUsername(t.getUsername());
            accounts.add(s);
        }

        showTable(accounts);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnTwitter = new javax.swing.JButton();
        panelList = new javax.swing.JPanel();
        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtStartTime = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Repost");

        btnTwitter.setToolTipText("add twitter account");
        btnTwitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTwitterActionPerformed(evt);
            }
        });

        panelList.setBorder(javax.swing.BorderFactory.createTitledBorder("Accounts"));

        javax.swing.GroupLayout panelListLayout = new javax.swing.GroupLayout(panelList);
        panelList.setLayout(panelListLayout);
        panelListLayout.setHorizontalGroup(
            panelListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 221, Short.MAX_VALUE)
        );
        panelListLayout.setVerticalGroup(
            panelListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 372, Short.MAX_VALUE)
        );

        btnStart.setToolTipText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnStop.setToolTipText("Stop");
        btnStop.setEnabled(false);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        jLabel1.setText("Start Time:");

        txtStartTime.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnStart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStop)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnTwitter)
                        .addGap(284, 284, 284)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtStartTime, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnTwitter)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnStart)
                            .addComponent(btnStop))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTwitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTwitterActionPerformed
        TwitterAccountList twitterAccountList = new TwitterAccountList();
        twitterAccountList.setup();
        loadTable();
    }//GEN-LAST:event_btnTwitterActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
       twitterAccounts = new ArrayList<>();
        try {
            for (ScreenAccount account : helpTable.getAll()) {
                if (account.isSelected()) {
                    if (account.isTwitter()) {
                        TwitterAccount twitter = twitterAccountDao.findByUserName(account.getUsername());
                        twitter.connect();
                        twitterAccounts.add(twitter);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        if(twitterAccounts.isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "Choose at least one account to start");
            return;
        }
        lastTime = LocalDateTime.now();
        txtStartTime.setText(lastTime.format(DateTimeFormatter.ISO_DATE_TIME).toString());
        btnStop.setEnabled(true);
        btnStart.setEnabled(false);
        bot = new Bot();
        bot.start();
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        bot.status = false;
        btnStop.setEnabled(false);
        btnStart.setEnabled(true);
    }//GEN-LAST:event_btnStopActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }

    protected void showTable(List list) {
        helpTable.setList(list);
        helpTable.setJPanel(panelList);
        helpTable.setColEditable(0, true);
        table = helpTable.show();
    }

    private class Bot extends Thread {

        public boolean status;
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

        @Override
        public void run() {
            status = true;
            while (status) {
                try {
                    for (TwitterAccount account : twitterAccounts) {
                        List<AccountTarget> targets = accountTargetDao.listByAccount(account.getUsername());
                        for (AccountTarget target : targets) {
                            TimeLine timeLine = account.getUserTimeline(target.getTargetId());
                            for (Status tweet : timeLine.getTweets()) {

                                List<StatusReposted> tweets = statusRepostedDao.listByAccount(account.getUsername());
                                if (tweets.isEmpty()) {
                                    account.repost(Post.twitterPost(tweet));
                                    saveStatus(account.getUsername(), tweet.getId());
                                } else {
                                    if (tweets.stream().filter(t -> t.getPostId() == tweet.getId()).collect(Collectors.toList()).isEmpty()) {
                                        account.repost(Post.twitterPost(tweet));
                                        saveStatus(account.getUsername(), tweet.getId());
                                    }
                                }
                                Thread.sleep(500);
                            }
                        }
                    }

                    Thread.sleep(180000);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

    }

    private void saveStatus(String userName, long postId) {
        StatusReposted statusReposted = new StatusReposted(userName, postId);
        statusRepostedDao.doSave(statusReposted);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JButton btnTwitter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel panelList;
    private javax.swing.JTextField txtStartTime;
    // End of variables declaration//GEN-END:variables
}
